describe('Exercício 4 - Tabelas', () => {

    beforeEach(() => this.$div = document.querySelector('#exercicio'))

    describe('Tabela', () => {
        beforeEach(() => this.table = this.$div.querySelector('table'))
        it('deve ser uma tabela', () => {
            expect(this.table)
            .withContext('Use a tag de tabelas corretamente')
            .toBeTruthy()
        })
        it('deve possuir 6 linhas', () => {
            let trs = this.table.querySelectorAll("tr")
            expect(trs.length)
            .withContext('Dentro da tag <table> só pode haver <tr> nesse exercício')
            .toBe(6)
        })
    })
    describe("Primeira Linha", () => {
        beforeEach(() => this.tr = this.$div.querySelector('table tr:nth-child(1)'))
        it('deve conter 1 célula de cabeçalho, que expande em 5 colunas', () => {
            let th = this.tr.querySelectorAll(":scope > *")
            expect(th.length)
            .withContext("Células das primeiras linhas usualmente representam cabeçalhos. Use a tag adequada para isso.")
            .toBe(1)
            expect(th[0].tagName)
            .withContext("Células das primeiras linhas usualmente representam cabeçalhos. Use a tag adequada para isso.")
            .toBe('TH')
            expect(th[0].colSpan)
            .withContext("Configure a tag para expandir em várias colunas.")
            .toBe(5)
            expect(th[0].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Tabela de Serviços Mecânicos")
        })
    })
    describe("Segunda Linha", () => {
        beforeEach(() => this.tr = this.$div.querySelector('table tr:nth-child(2)'))
        it('deve conter 5 célula de cabeçalho', () => {
            this.ths = this.tr.querySelectorAll(":scope > th")
            expect(ths.length)
            .withContext("Células das primeiras linhas usualmente representam cabeçalhos. Use a tag adequada para isso.")
            .toBe(5)
        })
        it('células devem estar escritas corretamente', () => {
            this.ths = this.tr.querySelectorAll('th')
            expect(this.ths[0].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Nacionais")
            expect(this.ths[1].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Veículos")
            expect(this.ths[2].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Serviço")
            expect(this.ths[3].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Tempo Previsto")
            expect(this.ths[4].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Valor")
        })
        it('primeira célula deve expandir em cinco linhas', () => {
            this.th = this.tr.querySelector('th:nth-child(1)')
            expect(this.th.rowSpan)
            .withContext('Configure a tag para expandir em cinco linhas.')
            .toBe(5)
        })
    })
    describe("Terceira Linha", () => {
        beforeEach(() => this.tr = this.$div.querySelector('table tr:nth-child(3)'))
        it('deve conter 4 células normais', () => {
            this.tds = this.tr.querySelectorAll(":scope > td")
            expect(tds.length)
            .withContext("Células no meio da tabela são descritas com uma tag mais comum.")
            .toBe(4)
        })
        it('células devem estar escritas corretamente', () => {
            this.tds = this.tr.querySelectorAll('td')
            expect(this.tds[0].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Caminhonete S10")
            expect(this.tds[1].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Suspensão")
            expect(this.tds[2].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("3 horas e 25 minutos")
            expect(this.tds[3].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("350,00")
        })
    })
    describe("Quarta Linha", () => {
        beforeEach(() => this.tr = this.$div.querySelector('table tr:nth-child(4)'))
        it('deve conter 4 células normais', () => {
            this.tds = this.tr.querySelectorAll(":scope > td")
            expect(tds.length)
            .withContext("Células no meio da tabela são descritas com uma tag mais comum.")
            .toBe(4)
        })
        it('células devem estar escritas corretamente', () => {
            this.tds = this.tr.querySelectorAll('td')
            expect(this.tds[0].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Caminhonete Ranger")
            expect(this.tds[1].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Freio")
            expect(this.tds[2].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("3 horas e 45 minutos")
            expect(this.tds[3].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("200,00")
        })
    })
    describe("Quinta Linha", () => {
        beforeEach(() => this.tr = this.$div.querySelector('table tr:nth-child(5)'))
        it('deve conter 4 células normais', () => {
            this.tds = this.tr.querySelectorAll(":scope > td")
            expect(tds.length)
            .withContext("Células no meio da tabela são descritas com uma tag mais comum.")
            .toBe(4)
        })
        it('células devem estar escritas corretamente', () => {
            this.tds = this.tr.querySelectorAll('td')
            expect(this.tds[0].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Caminhonete Hilux")
            expect(this.tds[1].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Troca de Bateria")
            expect(this.tds[2].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("30 minutos")
            expect(this.tds[3].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("25,00")
        })
    })
    describe("Sexta Linha", () => {
        beforeEach(() => this.tr = this.$div.querySelector('table tr:nth-child(6)'))
        it('deve conter 4 células normais', () => {
            this.tds = this.tr.querySelectorAll(":scope > td")
            expect(tds.length)
            .withContext("Células no meio da tabela são descritas com uma tag mais comum.")
            .toBe(4)
        })
        it('células devem estar escritas corretamente', () => {
            this.tds = this.tr.querySelectorAll('td')
            expect(this.tds[0].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Caminhonete D10")
            expect(this.tds[1].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("Alinhamento")
            expect(this.tds[2].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("1 hora e 40 minutos")
            expect(this.tds[3].innerText)
            .withContext("Respeite o texto em termos de maiúsculas e minúsculas.")
            .toBe("220,00")
        })
    })
})